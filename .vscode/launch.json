{
    "version": "0.2.0",
    "configurations": [
        {
            "name": "Debug csim in WSL",
            "type": "cppdbg",
            "request": "launch",
            //  Update with the path to your compiled binary,Translate the Windows path to a WSL path
            // Use /mnt to access the corresponding drives in WSL (/mnt/c for the C: drive, /mnt/d for the D: drive, etc.).
            "program": "/mnt/d/projects/csapp/labs/cachelab/cachelab-handout/csim",
            "args": ["-s", "4" ,"-E", "1", "-b", "4", "-t", "traces/yi.trace"],
            "stopAtEntry": false,
            // Set working directory to where the executable will run
            // cwd (current working directory) is used to specify where the program will be executed or run from on your local machine. 
            // This is relevant when youâ€™re debugging locally or when you want to ensure that file paths and the execution context align with your local project.
            // Update both cwd and pipeCwd to the correct WSL paths.
            "cwd": "/mnt/d/projects/csapp/labs/cachelab/cachelab-handout", 
            "environment": [],
            "externalConsole": true, // This enables an external terminal
            "MIMode": "gdb",
            "miDebuggerPath": "/usr/bin/gdb", // The path to GDB in WSL
            "setupCommands": [
              {
                "description": "Enable pretty-printing for gdb",
                "text": "-enable-pretty-printing",
                "ignoreFailures": true
              }
            ],
            "preLaunchTask": "Build with make csim", //Task to compile the code before running the debugger
            // pipeTransport: This is necessary to run GDB in the WSL environment. 
            // It uses the WSL utility (wsl) to run the debugger from within the Linux subsystem.
            //  launch GDB from WSL via the pipeTransport field, and it will map the filesystem between WSL and Windows using sourceFileMap
            "pipeTransport": {
                //pipeCwd specifies the working directory for the program that is running inside the remote environment (such as WSL.Docker).
                // Essentially, pipeCwd defines the current working directory where the debugger will start its process on the remote machine or environment. 
                // It serves as the equivalent of setting the working directory when running programs in a terminal.              
                "pipeCwd":"",
                "pipeProgram": "bash.exe",
                "pipeArgs": ["-c"],
                "debuggerPath": "/usr/bin/gdb"
            },
            "sourceFileMap": {
                "/mnt/d": "D:\\", // Mapping WSL filesystem to Windows
                "/home": "${workspaceFolder}" // Mapping WSL home to your project
            },

             "targetArchitecture": "x86_64",
             "logging": { "engineLogging": true },

          },


        // {
        //     "name": "msys64 C/C++: gdb debug active file",
        //     "type": "cppdbg",
        //     "request": "launch",
        //     "program": "${fileDirname}\\${fileBasenameNoExtension}.exe",
        //     "args": [],
        //     "stopAtEntry": false,
        //     "cwd": "${fileDirname}",
        //     "environment": [],
        //     "externalConsole": false,
        //     "MIMode": "gdb",
        //     "miDebuggerPath": "C:\\msys64\\ucrt64\\bin\\gdb.exe",
        //     "setupCommands": [
        //         {
        //             "description": "Enable pretty-printing for gdb",
        //             "text": "-enable-pretty-printing",
        //             "ignoreFailures": true
        //         },
        //         {
        //             "description": "Set Disassembly Flavor to Intel",
        //             "text": "-gdb-set disassembly-flavor intel",
        //             "ignoreFailures": true
        //         }
        //     ],
        //     // debug the main.c, it will run prelaunch task:  "demo gcc build" to compile the source files
        //     // "preLaunchTask": "demo gcc build"
        //     // "preLaunchTask": "demo build with Makefile"
        //      "preLaunchTask": "C/C++: gcc.exe build active file"
        //     //  "preLaunchTask": "build with Makefile"
        // }
    ]
}